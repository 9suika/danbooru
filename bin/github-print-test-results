#!/usr/bin/env ruby

# Displays test results in Github. Outputs an annotation for each test failure and a test summary at the end. Can be
# used outside of Github, in which case it just prints plain text. Works by parsing the JUnit output files generated by
# Minitest::Reporters::JUnitReporter and printing Github workflow commands to stdout.
#
# Usage: `bin/rails test; bin/github-print-test-results`
#
# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary
# https://github.github.com/gfm/

require_relative "../config/environment"

def parse_files(filenames)
  filenames.flat_map do |filename|
    xml = File.read(filename)
    Nokogiri::XML.parse(xml).css("testcase")
  end
end

def print_annotations(testcases)
  testcases.each do |tc|
    if tc.at_css("failure, error, skipped").present?
      if tc.at_css("skipped").present?
        type = "notice"
        message = "Skipped test."
      else
        type = "error"
        message = tc.text.to_s.strip.remove(/test_: |\(Minitest::Result\) /)
      end

      title = "#{tc[:classname]}: #{tc[:name].delete_prefix("test_:").strip.delete_suffix(".")} (#{tc[:time].to_f.round(2)}s)"
      puts "::#{type} file=#{File.realpath(tc[:file])},line=#{tc[:lineno]},title=#{github_escape(title)}::#{github_escape(message)}"
    end
  end
end

def print_summary(testcases, output)
  tests = testcases.count
  assertions = testcases.sum { _1[:assertions].to_i }
  failures = testcases.count { _1.at_css("failure") }
  errors = testcases.count { _1.at_css("error") }
  skips = testcases.count { _1.at_css("skipped") }
  passes = tests - failures - errors - skips
  seconds = testcases.sum { _1[:time].to_f }

  # https://github.com/test-summary/action
  output.puts "![](https://svg.test-summary.com/dashboard.svg?p=#{passes}&f=#{failures + errors}&s=#{skips})"
  output.puts ""
  output.puts "#{tests.pluralize("test")}, #{assertions.pluralize("assertion")}, #{failures.pluralize("failure")}, #{errors.pluralize("error")}, #{skips.pluralize("skip")}"
  output.puts "Finished in #{ApplicationController.helpers.duration_to_hhmmss(seconds)} (#{(seconds / tests).round(2)}s / test, #{(seconds / assertions).round(2)}s / assertion)" if tests.nonzero? && assertions.nonzero?
end

def github_escape(str)
  str.gsub(/[%\n\r]/, { "%" => "%25", "\n" => "%0A", "\r" => "%0D" })
end

def main(filenames)
  summary_file = ENV["GITHUB_STEP_SUMMARY"].present? ? File.open(ENV["GITHUB_STEP_SUMMARY"], "w") : STDOUT

  filenames = ["**/TEST-*.xml"] if filenames.blank? # XXX doesn't follow symlinks
  filenames = filenames.flat_map { |filename| Dir.glob(filename) }.sort
  testcases = parse_files(filenames)

  print_annotations(testcases)
  print_summary(testcases, summary_file)
end

main(ARGV)
